# Zasto React?

- Nekad je bio server side rendering, pa nije morao js library, nego jquery se koristio (i dalje se koristi)
Sada sve vise ima SPA aplikacija gde je CLIENT side rendering i pise se puno koda na frontu a na backu samo baza i API i zato je potreban React i druge biblioteke da bi taj proces ubrzale i olaksale

- Cela poenta frontenda je da neki DATA display-a na UI i da DATA i UI budu in sync. To je mnogo tesko sa JS-om i pravi se spagheti code. React dobro resava to.

# Sta je React?

- React is javascript library for building UI created by Facebook
- Component based, state driven, declarative (abstraction, kazemo kako zelimo da izgleda a ne kako ce to da uradi, za to koristimo jsx, a on ispod haube to napravi da se prikazuje na stranici)
- React reaguje na state changes tako sto opet re-renderuje UI (zato se i zove React :)

# Ekstenzije
ESLint -> lepo daje koji je error !!! (idi settings eslint run i stavi onSave)
Prettier 
One Monokai Theme -> tema (ako oces)
Material Icon Theme

Ako hoces da imas code snippets kao on, mozes da uzmes i isao snippets -> new global snippet -> nazoves -> paste ovo: (testiraj posle ovo cl i rfc npr, imas i fajl snippets.json ako si poslao)
{
  "Print to console": {
    "prefix": "cl",
    "scope": "javascript,typescript,javascriptreact",
    "body": ["console.log($1)"],
    "description": "console.log"
  },
  "reactComponent": {
    "prefix": "rfc",
    "scope": "javascript,typescript,javascriptreact",
    "body": [
      "function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "React component"
  },
  "reactStyledComponent": {
    "prefix": "rsc",
    "scope": "javascript,typescript,javascriptreact",
    "body": [
      "import styled from 'styled-components'",
      "",
      "const Styled${TM_FILENAME_BASE} = styled.$0``",
      "",
      "function ${TM_FILENAME_BASE}() {",
      "\treturn (",
      "\t\t<Styled${TM_FILENAME_BASE}>",
      "\t\t\t${TM_FILENAME_BASE}",
      "\t\t</Styled${TM_FILENAME_BASE}>",
      "\t)",
      "}",
      "",
      "export default ${TM_FILENAME_BASE}",
      ""
    ],
    "description": "React styled component"
  }
}


# Importovanje React-a

- Ima vise nacina, old school je da ubacis u html za react i onda tako importujes kao sto bi inace importovao css u html npr, ali posle ima dosta posla, msm moras da pravis root, moras da radis createElement i createRoot, moras React.useState i sve iz react-a maltane sa React. itd itd, a ako koristis built tools oni to srede za tebe taj setup i lakse je koristiti

Dve glanve opcije za kreiranje react projekta:
1)create-react-app -> starije, koristi neke sporije stvari npr slow refresh times, ne preporucuje se za real-world apps ali za ucenje je skroz okej. On ce da koristi ovo jer ovde ne moras da set-upujes rucno ESLint dok za vite moras i onda nece to sada

npx create-react-app@5 nazivApp (bez stringa, a ovo @5 je verzija koju on koristi, ali ako pravis svoj projekat stavis bez tog broja i onda ce latest da stavi automatski, al kao ajde da imas isto kao i on)
npm start (da pokrenes app koju si napravio sa create-react-app)


2) vite -> za sve bolje i bitnije, modernije, standard za real world apps. Veoma brz bundling, brz refresh rates itd, samo zahteva manuelno namestanje ESLint pa za ove tutorijale ce koristi create react apps ali za poslednjih par projekta ce da koristi vite 

3) Moze i react frameworci da se koriste kao sto su Next.JS ili Remix

# React documentacija
- react.dev -> i cim nesto ti treba imas tu search i lagano nadjes i procitas, dobra im je dokumentacija bas





























